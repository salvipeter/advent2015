(defun adv17 (containers)
  (labels ((rec (n list)
             (cond ((zerop n) 1)
                   ((null list) 0)
                   (t (+ (if (>= n (car list))
                             (rec (- n (car list)) (cdr list))
                             0)
                         (rec n (cdr list)))))))
    (rec 150 containers)))

(defun adv17b (containers)
  (let ((large (length containers)))
    (labels ((find-min (n list)
               (cond ((zerop n) 0)
                     ((null list) nil)
                     (t (min (1+ (or (and (>= n (car list))
                                          (find-min (- n (car list)) (cdr list)))
                                     large))
                             (or (find-min n (cdr list))
                                 large)))))
             (rec (n list k)
               (cond ((zerop n) 1)
                     ((or (zerop k) (null list)) 0)
                     (t (+ (if (>= n (car list))
                               (rec (- n (car list)) (cdr list) (1- k))
                               0)
                           (rec n (cdr list) k))))))
      (rec 150 containers (find-min 150 containers)))))

(defparameter *data*
  '(50 44 11 49 42 46 18 32 26 40 21 7 18 43 10 47 36 24 22 40))
